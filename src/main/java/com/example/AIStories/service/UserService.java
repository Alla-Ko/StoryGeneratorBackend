package com.example.AIStories.service;

import com.example.AIStories.dto.GoogleUserDTO;
import com.example.AIStories.dto.UserUpdateDTO;

import com.example.AIStories.entity.CommentLike;
import com.example.AIStories.entity.Role;
import com.example.AIStories.entity.User;
import com.example.AIStories.exception.EmailAlreadyExistsException;
import com.example.AIStories.exception.IncorrectPasswordException;
import com.example.AIStories.exception.RoleNotFoundException;
import com.example.AIStories.exception.UserNotFoundException;
import com.example.AIStories.repository.RoleRepository;
import com.example.AIStories.repository.UserRepository;
import com.example.AIStories.security.JwtService;
import jakarta.persistence.EntityNotFoundException;
import lombok.RequiredArgsConstructor;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class UserService {
	private final UserRepository userRepository;
	private final RoleRepository roleRepository;
	private final PasswordEncoder passwordEncoder;
	private final JwtService jwtService;
	private final EmailService emailService;
	private final CommentService commentService;
	private final CommentLikeService commentLikeService;
	private final LikeService likeService;

	// üîπ 1. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ email —ñ –ø–∞—Ä–æ–ª—é
	public User registerUser(String email, String password) {
		if (userRepository.findByEmail(email).isPresent()) {
			throw new EmailAlreadyExistsException("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–æ—é –ø–æ—à—Ç–æ—é –≤–∂–µ —ñ—Å–Ω—É—î!");
		}

		User newUser = new User();
		newUser.setEmail(email);
		newUser.setPassword(passwordEncoder.encode(password));
		newUser.setNickname(generateUniqueNickname(email));
		newUser.setUsername(email);
		newUser.setCreatedDate(new Date());

		// –î–æ–¥–∞—Ç–∏ —Ä–æ–ª—å "ROLE_USER" –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ä–æ–ª—å "ROLE_USER" –≤ –ë–î, —ñ —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î, –¥–æ–¥–∞—î–º–æ
		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ä–æ–ª—å "ROLE_USER" –≤ –ë–î, —ñ —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î, –¥–æ–¥–∞—î–º–æ
		Role userRole = roleRepository.findByName("USER");

		if (userRole == null) {
			// –Ø–∫—â–æ —Ä–æ–ª—å –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó
			userRole = new Role();
			userRole.setName("USER"); // –∑–∞–¥–∞—î–º–æ —Ä–æ–ª—å
			roleRepository.save(userRole); // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–æ–ª—å –≤ –±–∞–∑—ñ
		}

		// –î–æ–¥–∞—î–º–æ —Ä–æ–ª—å –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
		if (newUser.getRoles() == null) {
			newUser.setRoles(new HashSet<>());
		}
		newUser.getRoles().add(userRole);

		return userRepository.save(newUser);
	}
	public String authenticateUserWithGoogle(GoogleUserDTO googleUser) {
		// –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Google
		String email = googleUser.getEmail();
		String imageUrl = googleUser.getPicture();

		User user=registerGoogleUser( email,  imageUrl);
		return jwtService.generateJwtToken(user);
	}



	// üîπ 2. –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —á–µ—Ä–µ–∑ Google (—è–∫—â–æ –π–æ–≥–æ —â–µ –Ω–µ–º–∞—î –≤ –ë–î)
	public User registerGoogleUser(String email, String avatarUrl) {
		return userRepository.findByEmail(email)
				.orElseGet(() -> {
					User newUser = new User();
					newUser.setEmail(email);
					newUser.setAvatarUrl(avatarUrl);
					newUser.setUsername(email);
					newUser.setCreatedDate(new Date());
					newUser.setNickname(generateUniqueNickname(email));
					// –î–æ–¥–∞—Ç–∏ —Ä–æ–ª—å "ROLE_USER" –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
					// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ä–æ–ª—å "ROLE_USER" –≤ –ë–î, —ñ —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î, –¥–æ–¥–∞—î–º–æ
					Role userRole = roleRepository.findByName("USER");

					if (userRole == null) {
						// –Ø–∫—â–æ —Ä–æ–ª—å –Ω–µ —ñ—Å–Ω—É—î, —Å—Ç–≤–æ—Ä—é—î–º–æ —ó—ó
						userRole = new Role();
						userRole.setName("USER"); // –∑–∞–¥–∞—î–º–æ —Ä–æ–ª—å
						roleRepository.save(userRole); // –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ä–æ–ª—å –≤ –±–∞–∑—ñ
					}

					// –î–æ–¥–∞—î–º–æ —Ä–æ–ª—å –¥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
					if (newUser.getRoles() == null) {
						newUser.setRoles(new HashSet<>());
					}
					newUser.getRoles().add(userRole);

					return userRepository.save(newUser);
				});
	}


	// üîπ 3. –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è JWT —Ç–æ–∫–µ–Ω–∞ –ø—ñ—Å–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
	public String authenticateUser(String email, String password) {
		User user = userRepository.findByEmail(email)
				.orElseThrow(() -> new UserNotFoundException("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"));

		if (!passwordEncoder.matches(password, user.getPassword())) {
			throw new IncorrectPasswordException("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞ –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—è –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞ –ø–æ—à—Ç–∞/–ø–∞—Ä–æ–ª—å!");
		}

		return jwtService.generateJwtToken(user);
	}

	// üîπ 4. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–∫–µ–Ω–∞ (Bearer-—Ç–æ–∫–µ–Ω)
	public User getCurrentUser() {
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		if (authentication == null || !authentication.isAuthenticated()) {
			throw new UserNotFoundException("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π!");
		}

		String email = authentication.getName();
		return userRepository.findByEmail(email)
				.orElseThrow(() -> new UserNotFoundException("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!"));
	}
public boolean isCurrentUserAdmin(){
	Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
	if (authentication == null || !authentication.isAuthenticated()) {
		throw new UserNotFoundException("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π!");
	}
	String email = authentication.getName();
	User currentUser= userRepository.findByEmail(email)
			.orElseThrow(() -> new UserNotFoundException("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!"));
	return currentUser.getRoles().stream().anyMatch(role -> role.getName().equals("ADMIN"));

}
	// üîπ 5. –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

	public User updateUser(Long userId, UserUpdateDTO updatedUser) {
		User existingUser = userRepository.findById(userId)
				.orElseThrow(() -> new UserNotFoundException("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!"));



		if (updatedUser.getNickname() != null) {
			existingUser.setNickname(updatedUser.getNickname());
		}
		if (updatedUser.getAvatarUrl() != null) {
			existingUser.setAvatarUrl(updatedUser.getAvatarUrl());
		}

		return userRepository.save(existingUser);
	}


	public void changePassword(Long userId, String oldPassword, String newPassword) {
		User user = userRepository.findById(userId)
				.orElseThrow(() -> new UserNotFoundException("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!"));

		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å
		if (!passwordEncoder.matches(oldPassword, user.getPassword())) {
			throw new IncorrectPasswordException("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å—Ç–∞—Ä–∏–π –ø–∞—Ä–æ–ª—å!");
		}

		// –•–µ—à—É—î–º–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º
		user.setPassword(passwordEncoder.encode(newPassword));
		userRepository.save(user);
	}



	// üîπ 6. –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

		@Transactional
		public void deleteUser(Long userId) {
			User user = userRepository.findById(userId)
					.orElseThrow(() -> new UserNotFoundException("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"));

			// –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ–≤ –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
			commentLikeService.deleteLikesOnOtherUsersStories(userId);
			likeService.deleteLikesOnOtherUsersStories(userId);

			commentService.updateCommentsSetUserToDeleted(userId);

			// –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
			userRepository.delete(user);
		}


	// üîπ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ username –∑ email
	private String generateUniqueNickname(String email) {
		String baseNickname = email.split("@")[0];
		String nickname = baseNickname;
		int counter = 1;

		while (userRepository.findByNickname(nickname).isPresent()) {
			nickname = baseNickname + "_" + counter;  // –º–æ–∂–Ω–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ —ñ–Ω—à—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏
			counter++;
		}
		return nickname;
	}

	public User updateRoles(Long userId, Set<String> newRoleNames) {
		// –ó–Ω–∞–π–¥–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ –π–æ–≥–æ ID
		User existingUser = userRepository.findById(userId)
				.orElseThrow(() -> new UsernameNotFoundException("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!"));

		// –û—Ç—Ä–∏–º–∞—î–º–æ —Ä–æ–ª—ñ –∑–∞ —ó—Ö–Ω—ñ–º–∏ —ñ–º–µ–Ω–∞–º–∏
		Set<Role> newRoles = newRoleNames.stream()
				.map(roleName -> {
					Role role = roleRepository.findByName(roleName); // –∑–Ω–∞–π–¥–µ–º–æ —Ä–æ–ª—å
					if (role == null) {
						throw new RoleNotFoundException("–†–æ–ª—å " + roleName + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!");
					}
					return role;
				})
				.collect(Collectors.toSet());

		// –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
		existingUser.setRoles(newRoles);

		return userRepository.save(existingUser);
	}


	public String initiatePasswordReset(String email) {
		// –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –ø–æ email
		User user = userRepository.findByUsername(email)
				.orElseThrow(() -> new UserNotFoundException("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–æ—é –ø–æ—à—Ç–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!"));

		// –ì–µ–Ω–µ—Ä—É—î–º–æ —Ç–æ–∫–µ–Ω –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
		String token = jwtService.generatePasswordResetToken(user);

		// –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –≤–∏–∫–ª–∏–∫ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –ª–∏—Å—Ç–∞
		// –ó–∞–º—ñ—Å—Ç—å —Ü—å–æ–≥–æ –≤–∏–∫–ª–∏–∫–∞—î–º–æ —Å–µ—Ä–≤—ñ—Å –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ª–∏—Å—Ç—ñ–≤
		emailService.sendPasswordResetEmail(user.getEmail(), token);

		return "–Ø–∫—â–æ —Ç–∞–∫–∞ –ø–æ—à—Ç–∞ —ñ—Å–Ω—É—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö, –ª–∏—Å—Ç –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—é –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!";
	}
	public String resetPassword(String token, String newPassword) {
		// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ç–æ–∫–µ–Ω
		User user = jwtService.verifyPasswordResetToken(token);

		// –•–µ—à—É—î–º–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
		user.setPassword(passwordEncoder.encode(newPassword));
		userRepository.save(user);

		return "–ü–∞—Ä–æ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ!";
	}
	public User getUserById(Long userId) {
		return userRepository.findById(userId).orElse(null);
	}

	public Optional<User> findByUsername(String mail) {
		return userRepository.findByUsername(mail);
	}
}
